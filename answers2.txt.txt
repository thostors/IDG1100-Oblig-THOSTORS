Section II – UNIX, Scripting


6. What is the octal representation of a file that can be read and written only by its owner?
Answer:
The octal representation of a file that only can be read and written by its owner would be 6 0 0,
6 as in read and write permissions for the owner, and 0 as in no permission for the rest.

7. In UNIX systems, what is the common name of the special user that can access and modify every file?
Answer:
The common name for that user would be superuser.

8. Which file permission classes are available in UNIX systems?
Answer:
user, group and others

9. As of 2020, which percentage of servers have UNIX-like OS?
Answer:
As of 2020 about 70%.

10. The command ssh will:
Answer: 
Connect to a remote server (Create a secure connection between two hosts)

11. UNIX Command: access your current working directory
Answer: pwd

12. UNIX Command: rename files (give an example)
Answer: mv (example: mv example1.txt example2.txt

13. UNIX Command: schedule the execution of programs in the future
Answer: crontab -e, followed by further instructions such as when it should be scheduled and what it will do.

14. UNIX Command: Forcefully shutdown the command with process ID 123
Answer: kill 123

15. UNIX Command: access your root user
Answer: sudo -s

16. Crontab scheduled: At minute 30 on Sunday.
Answer: 30 * * * 7

17. Crontab scheduled: At minute 30 on day-of-month 15.
Answer: 30 * 15 * *

18. Crontab scheduled: At 05:30 on every day-of-week from Sunday through Monday in June.
Answer: 30 05 * 6 0-1

19. Script: print your name and date
Answer: 
#!/bin/bash
echo "Enter your name"


read name


echo "Hello $name, todays date is $(date)"

20. Script: add two numeric values, print the result
Answer: 
#!/bin/bash

read -p "Enter first number: " num1
read -p "Enter second number: " num2

sum=$(( $num1 + $num2 ))

echo "Sum is: $sum"

21. Script: inputs username, prints “USERNAME stored”
Answer: 

#!/bin/bash
echo "Enter username"

 

read username

 

echo "$username stored"

22. Script: Store the output of the command “hostname” in a variable. Display “This script is running on _.” where “_” is the output of the “hostname” command.
Answer:

#!/bin/bash
echo "This script is running on $(hostname)"

23. Script: Store the output of the working directory (from where the script is run) in a variable
then print the variable.
Answer:

#!/bin/bash

echo "This script is running from $(pwd)"

24. Create a step by step tutorial on how to create a cronjob that prints “Task scheduled at” +
DATE. Cronjob is scheduled every 30 minutes on today’s date (only today).
answer:

STEP 1. Firstly you need to access the root user using the command "sudo -s" followed by password.
STEP 2. Create your cronjob with command "crontab -e" and select editor (my editor is nano)
Step 3. Then on to creating the cronjob that prints "Task scheduled at date" every 30 minutes today
       - You now need to make a file for the script to output. use "touch filename.txt" to create your txt file. (filename is up to you)
       - Set the schedule for the cronjob, for this task it is todays date + every 30 mintues. for me it will be 30 * 20 11 5, since its friday the 20th november while making this tutorial.
       - Find the path of the txt file you created earlier, i created tutorial.txt inside IDG1100 so for me its home/thostors/IDG1100/tutorial.txt
       - Now create an echo for the cronjob to execute. For this task we will echo "Task scheduled at $(date)
       - Combine the steps to create the script "30 * 19 11 4 echo "Task scheduled at $(date)" >> home/thostors/IDG1100/tutorial.txt"
STEP 4. Now to start the cronjob. First time start-up, use "service cron status" to see if it is running or not. If its not running use "serice cron start". Use "service cron status" to confirm that you have started it.
STEP 5. After 30 mintues check your output file to see if the cronjob did its job. For me it looked like this "Task scheduled at Fri Nov 20 12:28:01 CET 2020".

25. Create a script that takes an input (letter or number) that will display the answer of a question.
The script should when started list a menu for the user with the different questions that can be
chosen and which corresponding letter the user will have to give as input to display the answer of
the desired question. One of the possible inputs the user should be able to make is "q" for quitting
the script. The menu should also have a default case where all the items is displayed again, or no
changes is made if the user gives an invalid input. Hint: use a switch case to be able to handle the
menu. Each option in the menu should lead to an echo of the answer

Answer: 

#!/bin/bash
while [ "$NUMBER" != "9" ]
do

echo "1. Question 1 -Who is the lead guitarist in Avenged Sevenfold?"

echo "2. Who won the 2020 Election"

echo "3. How long does it take for a tomato to grow?"

echo "4. What is the capital of norway?"

echo "Choose a question 1-4: "

read -r NUMBER

case $NUMBER in

1) clear
echo "synyster gates"
read -r
;;


2) clear
echo "Joe Biden"
read -r
;;

3) clear
echo "50-60 days"
read -r
;;

4) clear
echo "Oslo"
read -r
;;

9) echo Scriptet ended
exit
;;
esac
done